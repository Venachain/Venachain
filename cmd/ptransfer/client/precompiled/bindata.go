package precompile

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _release_linux_conf_contracts_cnsinitregevent_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\x50\x50\xa8\x06\x93\x20\xa0\x94\x97\x98\x9b\xaa\x64\xa5\xa0\x14\xed\xec\x17\x1c\xab\xe0\x97\x5f\x92\x99\x56\xa9\xa4\x83\x90\xcf\xcc\x2b\x28\x2d\x29\x56\xb2\x52\x88\x86\x8b\xa1\x9a\x00\x57\x59\x52\x59\x00\x36\xa9\x34\x33\xaf\xc4\xcc\x44\x09\x45\x41\xad\x0e\xb1\xba\x8b\x4b\x8a\x32\xf3\xd2\xd1\x74\xc3\x79\xb1\x48\x2e\x83\xe9\x48\x2d\x4b\xcd\x2b\x81\x68\xa8\xe5\x8a\xe5\x02\x04\x00\x00\xff\xff\x62\x56\xb5\x6c\xe2\x00\x00\x00")

func release_linux_conf_contracts_cnsinitregevent_json() ([]byte, error) {
	return bindata_read(
		_release_linux_conf_contracts_cnsinitregevent_json,
		"../../release/linux/conf/contracts/cnsInitRegEvent.json",
	)
}

var _release_linux_conf_contracts_cnsinvokeevent_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\x50\x50\xa8\x06\x93\x20\xa0\x94\x97\x98\x9b\xaa\x64\xa5\xa0\xe4\x9c\x57\xec\x99\x57\x96\x9f\x9d\xaa\xa4\x83\x90\xcc\xcc\x2b\x28\x2d\x29\x56\xb2\x52\x88\x86\x8b\xa1\x6a\x87\xab\x2c\xa9\x2c\x00\x1b\x53\x9a\x99\x57\x62\x66\xa2\x84\xa2\xa0\x56\x87\x58\xdd\xc5\x25\x45\x99\x79\xe9\x68\xba\xe1\xbc\x58\x24\x97\xc1\x74\xa4\x96\xa5\xe6\x95\x40\x34\xd4\x72\xc5\x72\x01\x02\x00\x00\xff\xff\xb1\xe8\x47\x80\xdf\x00\x00\x00")

func release_linux_conf_contracts_cnsinvokeevent_json() ([]byte, error) {
	return bindata_read(
		_release_linux_conf_contracts_cnsinvokeevent_json,
		"../../release/linux/conf/contracts/cnsInvokeEvent.json",
	)
}

var _release_linux_conf_contracts_cnsmanager_cpp_abi_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\xb1\x6a\xc3\x30\x10\xdd\xfd\x15\xc2\x73\xa6\xb6\x74\xc8\xd6\xa4\x14\x3a\xd4\x81\x66\x0c\x19\x84\x7d\x16\x07\xf1\xc9\x48\xa7\x80\x5b\xfa\xef\xc5\xa1\x4e\xec\x04\x82\x5d\xb9\x6d\x2a\x92\x21\xc6\x96\x74\x8f\xf7\xde\xe9\x49\xab\x48\x08\x21\xde\x77\xff\xf5\x2f\x26\x59\x40\x3c\x15\x71\x4a\xf6\x15\x14\x5a\x06\xf3\x64\x74\xf1\x4c\xc8\xf1\xe4\x30\x0d\xa9\x74\x6c\xe3\xa9\x58\xed\xbf\x75\x0b\x9d\x14\xdc\x3d\x27\xa7\xe3\x5c\x95\xbb\x71\xcb\x06\x49\xc5\x9d\x09\x1f\x93\xbe\xd5\xb7\x60\x2c\x6a\x1a\x0c\xb0\x7f\x5b\xb7\xc8\x69\xc7\x43\xd9\x9d\x03\x46\xe2\xdb\x9b\x3e\xb8\xa9\x26\xcb\x92\xb8\x5e\x94\xcb\x8d\x6d\xeb\xb5\xaf\x96\x3b\x4a\xb9\xa6\x1a\xb5\x14\x3a\x6f\x60\x88\xc6\xf5\x06\x90\x59\x66\xc0\xda\x6b\x67\x74\x3b\x23\x43\x03\xe9\x75\x4b\xff\x2b\xe3\x14\xf0\x5c\x13\x1b\x99\xf2\xc3\x49\x57\x5f\xfd\x3b\xc2\x1f\x07\xb8\x6d\x20\x1b\xe7\xeb\x5f\x13\xc9\x90\x35\x4e\x7a\x7a\x58\x4a\x05\x89\x2b\x86\x36\x6b\x6f\x17\xeb\xfa\x4b\x7c\x3b\xdb\x27\xbd\x77\x43\xc0\x2e\xce\xaa\x85\x41\x85\xe4\xe7\xa6\x3e\xae\xe1\xc1\x39\x08\xb1\x31\x3f\x68\x3d\xab\x92\x6e\x60\xfd\x56\xe4\x5d\xec\x89\x32\xae\xba\xa3\x9c\x29\xc1\x5d\xb7\x7e\x2a\x2e\x82\x57\xfb\xb2\xd2\x39\xe0\xe8\xf8\xa3\x64\x2e\x4a\x6d\x78\xb1\xc9\xe6\x64\x5f\x24\x49\x05\xe6\x51\xb2\xf4\xd3\x78\x7c\x9a\xde\x97\xee\xd5\x3c\x59\xae\x45\xa2\x19\xf3\xea\x7b\xe4\x1a\x44\x87\xc4\xf7\x77\x43\x2f\x62\xc3\xe9\x37\x2b\x60\x0b\xc4\x5f\xf4\xa2\x75\xf4\x19\x00\x00\xff\xff\x9e\x68\xc1\x12\xeb\x11\x00\x00")

func release_linux_conf_contracts_cnsmanager_cpp_abi_json() ([]byte, error) {
	return bindata_read(
		_release_linux_conf_contracts_cnsmanager_cpp_abi_json,
		"../../release/linux/conf/contracts/cnsManager.cpp.abi.json",
	)
}

var _release_linux_conf_contracts_firewall_abi_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x4f\x6b\xbc\x30\x10\xbd\xfb\x29\x42\xce\x9e\x7e\xbf\xd2\xc3\xde\x4a\xff\x40\x2f\xed\xa1\xc7\x65\x91\xb0\x8e\x25\xe0\x4e\x24\x99\xb4\x95\xb2\xdf\xbd\xec\x2e\x5a\x6d\x97\x56\xb3\x5b\x34\x21\x1e\x04\x35\x79\x8f\xf7\xe6\x0d\x64\x5c\x26\x8c\x31\xf6\xbe\xbf\xef\x2e\x8e\x62\x03\x7c\xc1\x78\x96\x99\xda\x64\x77\xaf\x8f\x15\x20\x4f\x3f\xbf\x4b\xac\x2c\x19\xbe\x60\xcb\xf6\x5d\x1f\xe1\x1b\x92\xc8\x73\x0d\xc6\x74\x40\xda\x25\x54\x57\xfb\x25\x86\xb4\xc4\x67\xde\x5b\xb0\x6d\x9f\x56\x1d\x7a\x65\x69\x2c\xff\x4f\xc4\x12\xe9\xff\xbf\x21\xbc\x6b\x85\x86\x04\xd2\x6e\x53\x21\x4a\x03\x5d\x4f\x1a\xb4\xc2\xe2\x9a\xa4\xc2\x03\xe0\x36\xfd\xcd\xdb\xeb\x52\xf5\x81\xa2\xb9\xe7\x33\xf7\x2a\xcf\xa7\xb1\x36\x1d\x4c\x70\xd0\xf3\x67\xf8\xda\x96\x10\x93\x71\xac\xed\x40\xe8\x30\xb3\x11\x7e\xf1\x6e\xa0\x0c\xb3\x74\xb1\xad\xbf\xa0\x8d\x4d\xc6\x13\x50\x4c\x46\x4c\xc6\xb1\x64\x90\x20\x6b\xc2\x3d\x68\x0d\x27\xee\xda\x4b\xda\x9e\xc5\xdd\xfb\x4d\xa5\xf4\xdc\x5b\x6f\x96\x75\x9b\xb6\x2b\x6e\xdf\xa6\xab\x5b\xb8\x5d\xf1\xa0\x48\x16\xb5\x9b\xab\x0d\x97\x95\x48\x97\x17\x63\xa3\x3e\x5e\x77\xb3\x03\x5e\x00\x69\x68\x6c\xdc\x7f\x08\x78\x21\xef\x84\x99\xdc\x0b\x7d\xce\x63\xb1\x17\xea\x9c\xa7\x03\x2f\xd4\x39\x9f\x70\xbd\x50\x77\xc2\x58\x3e\x07\x7d\xc9\x2a\xf9\x08\x00\x00\xff\xff\x02\x96\xf5\xb6\x4d\x15\x00\x00")

func release_linux_conf_contracts_firewall_abi_json() ([]byte, error) {
	return bindata_read(
		_release_linux_conf_contracts_firewall_abi_json,
		"../../release/linux/conf/contracts/fireWall.abi.json",
	)
}

var _release_linux_conf_contracts_groupmanager_cpp_abi_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x97\x4f\x4f\x84\x30\x10\xc5\xef\xfb\x29\x9a\x9e\x39\xa9\xf1\xb0\x37\x37\x9b\x98\xf5\x80\x26\x1e\x37\x7b\x68\x60\xc0\x26\x30\x25\x9d\xa9\x09\x31\xfb\xdd\x4d\x31\x20\x1b\x75\xff\x75\x15\xd4\xe5\x40\x02\xb4\xaf\xfd\xbd\xd7\xa1\xb0\x9c\x08\x21\xc4\x4b\x73\xf6\x87\x44\x55\x82\x9c\x0a\x99\x58\x50\x0c\xb7\xd6\xb8\x4a\x46\xef\x8f\x35\x56\x8e\x49\x4e\xc5\xb2\xbb\xb7\x29\xf0\x41\x28\xf7\x12\x0b\xcc\x4c\x4f\xa6\x6b\xc4\x75\xd5\x34\x22\xb6\x1a\x73\xb9\xd1\x60\xdd\x5d\xad\x7a\x13\x30\x8e\x0f\x9d\xc1\xb6\x81\x35\xf2\xe5\xc5\x3e\xe3\x26\x06\x89\x15\xb2\xef\x94\xa9\x82\xa0\xef\x4a\xab\x96\x39\x4c\x58\x1b\x7c\x13\x5c\x47\x5f\x99\x9b\x03\xdf\x14\x45\x63\x2e\x7d\xee\xee\x37\x22\xef\xef\x75\x9f\x99\xad\x0b\x42\x7e\x52\xd4\xf0\xde\x57\x0f\x60\x4b\x4d\xe4\xfb\xfc\x34\xfa\x51\x69\x87\x92\xa3\x49\x81\x62\x57\x86\x95\x91\x57\xb9\x23\x83\x8f\x6c\xff\x4e\x21\x85\x5a\x9b\x03\x37\x8b\x6a\x56\x2f\xe6\xa7\x78\x4b\xcd\xb7\x11\x3a\x8d\x7c\x7d\x35\x80\xb5\xc3\x14\xac\xab\x52\xc5\x30\x33\x86\x63\xbf\x80\x87\xb1\x37\xfa\xd7\xe5\x11\xbc\xcf\xa8\x34\x6d\x03\x3c\xe7\xb7\x73\x0e\xe3\xcb\x2f\x85\xe2\x9c\xdf\x2f\xce\x2f\x36\xac\xb3\xfa\xb8\xe8\xc2\x72\x39\xdc\xf0\xb6\x07\x3c\x03\xf2\x2e\xb0\xe0\xbf\x83\x51\xd3\x05\x97\xdd\xa8\xe9\x82\x37\x85\x51\xd3\x9d\xe4\xb3\x65\x0c\x84\x13\xb1\x7a\x0d\x00\x00\xff\xff\xdf\x65\x30\x4d\x9d\x0f\x00\x00")

func release_linux_conf_contracts_groupmanager_cpp_abi_json() ([]byte, error) {
	return bindata_read(
		_release_linux_conf_contracts_groupmanager_cpp_abi_json,
		"../../release/linux/conf/contracts/groupManager.cpp.abi.json",
	)
}

var _release_linux_conf_contracts_nodemanager_cpp_abi_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x97\x41\x6b\x83\x30\x14\xc7\xef\xfd\x14\x21\x67\x4f\xdb\xd8\xa1\xb7\x41\x77\xe9\xc0\x1d\x76\x2c\x3d\x64\xe6\x29\x81\xf8\x9e\x98\x97\x82\x8c\x7e\xf7\xa1\x43\xa7\x6c\xeb\x6a\xd3\x51\xb1\xf3\xa0\x18\x92\xf7\xf2\xfb\x9b\xff\x7b\xb8\x59\x08\x21\xc4\x5b\x73\xaf\x2f\x89\x2a\x07\xb9\x14\x52\x69\x2d\xa3\xcf\x61\x83\x85\x67\x27\x97\x62\xd3\x8d\x0d\x17\x7e\x09\x80\xa4\x61\xed\x08\x5f\xb8\xec\x05\xea\xa6\x71\x55\x34\xd3\x1c\x97\x06\x33\x39\x98\xb0\xef\xde\xb6\xbd\x2d\x90\xe7\xb1\x7b\x38\x94\xd8\x20\xdf\xde\x1c\x93\x37\x21\x74\xac\x90\xeb\x45\xa9\xb2\x0e\xfa\xba\xb4\xd1\x52\x8f\x09\x1b\xc2\x8f\x80\xfb\xe8\x27\x59\x33\xe0\x07\x6b\x63\xd2\xe0\xbe\x97\xf7\x0f\x89\x8f\x97\xba\x8f\xcc\xa5\x0f\x22\xde\x29\x6b\xf4\x9a\x0c\xd6\xd0\x61\x47\xaa\xf0\xaf\xd6\x24\x4f\x50\xcd\xe7\x40\x85\xaa\x5b\xbb\xcc\xc5\x3e\xff\xf7\xea\xd9\xa5\xcd\x80\x0f\xf8\x74\x2e\xd2\x5e\xa6\x28\xf8\x42\x2b\x0e\xac\x06\xcd\x73\x2c\x59\x34\x97\xef\x76\xb1\xf6\x15\x53\x99\x2b\xfb\x58\xeb\x73\x4d\x6d\x2c\x03\x5e\x81\x05\x06\x7d\x75\xe8\x26\x2f\xa8\xe4\x67\xab\x1b\xe8\x95\x62\x15\x66\x5c\x3d\x8c\x10\x40\x39\x0b\x4f\xc5\xc4\x26\xad\x4e\x93\xb4\xcd\xe5\x0d\xf2\xfd\xdd\xd8\x5a\x37\x5e\xf0\x76\x05\xec\x00\xf9\x37\xb0\x93\x7f\x21\x26\x4d\x15\xd2\xba\x26\x0d\x76\x2e\x9b\x4f\x01\x72\xb1\x7d\x0f\x00\x00\xff\xff\xaa\x77\xf5\x5f\xd9\x0e\x00\x00")

func release_linux_conf_contracts_nodemanager_cpp_abi_json() ([]byte, error) {
	return bindata_read(
		_release_linux_conf_contracts_nodemanager_cpp_abi_json,
		"../../release/linux/conf/contracts/nodeManager.cpp.abi.json",
	)
}

var _release_linux_conf_contracts_parammanager_cpp_abi_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\x31\x6f\xf2\x30\x10\xdd\xf3\x2b\xac\xcc\x99\xbe\xaf\xea\xc0\x96\xd2\x0a\x21\x55\x88\x81\x4e\x88\x21\x35\x86\x5a\x24\x76\x14\x5f\x28\x51\xc5\x7f\xaf\x42\x30\x04\xe2\x10\x17\x07\xea\x86\x01\x09\x63\x3f\xbf\xf7\xee\xe2\x3b\x67\xea\x20\x84\xd0\xd7\xee\x3b\xff\xb8\x2c\x88\x88\xdb\x43\xae\x20\x30\x08\x44\x9f\x33\x48\x02\x0c\xa3\x7c\xd4\x3b\xce\xa2\x2c\x4e\x41\xb8\x3d\x34\x3d\x8c\x9d\xe2\x54\xf0\xb0\x1a\xe9\x30\x0f\xb2\xb8\xd8\x17\x12\xca\x96\xee\xc9\x84\xed\xe1\xd7\xac\xc4\x81\xa7\x20\x49\x94\x87\x31\x67\x02\x02\x06\x39\xd8\x22\x08\xc5\x09\x6f\xb9\xcb\x22\x65\x18\x28\x67\xc5\x3e\x5b\xaf\xce\x85\xa5\xa6\x0b\x35\xbc\x74\xcd\x69\xc7\x90\xb2\x72\x48\x52\x23\xe1\x82\xc0\x50\x8c\x13\x3e\x4f\x31\x79\x89\x62\xc8\x9e\x42\x8e\x57\x66\x29\x40\x2f\x02\x56\xa8\xa6\x94\xc1\xff\x7f\x16\x65\x82\xb6\x21\x37\xcc\x06\x7d\x53\x5a\xce\x86\xc9\x66\x10\x88\x57\x1a\x51\x30\x4b\x02\x50\xe1\x28\x65\x3e\x3e\x58\x14\xfb\x26\xf9\x37\x0e\xb9\x9e\x17\x2d\x87\x7c\x97\xe1\xed\x44\xfd\xbd\x06\xca\x40\xec\x9d\x02\xaf\x61\x42\x17\x63\xef\x87\x21\xff\xf4\x59\xe6\x63\xcc\x53\x06\xcf\x24\x0e\x79\x26\xeb\xa0\x69\x19\xd0\x05\x57\xda\x61\x4b\x6e\x08\x02\xfd\x0f\x82\x57\x92\x77\xa1\x62\x4c\x92\x88\x0a\x91\xaf\x37\x6b\x97\x72\x68\x25\x98\xd2\x14\xab\xea\xe4\x15\xb6\x74\xae\x62\x2e\xaf\x7a\x84\x3a\x67\xc3\xae\x8d\xf4\xe3\x38\xe1\x6b\x52\x18\x40\xe6\xad\x9d\x22\x8d\xb0\x06\x26\xdc\xad\xa5\xfc\x91\x39\xdd\xcc\x8f\xc9\xe6\x4d\x90\x41\x20\x4c\x13\x42\x81\xa3\x94\x69\x55\x7f\xd1\x24\xff\x8f\x37\x17\x08\xa1\x73\xd9\x6e\xe5\x46\x8d\xaa\xc2\xcf\x04\xee\x77\x91\x59\xba\xf5\xd4\x7f\xef\xef\xca\x6a\x11\xfb\x39\x64\x4d\x64\x13\x71\x89\xa4\xf2\xb2\x67\x23\xd1\xf2\xcd\xc4\x46\x7e\x67\x0d\xb4\x8d\x14\x87\xa2\xa1\x65\xb1\x93\x74\x6d\xe9\xb0\x93\xee\xf1\x9c\xfb\x35\x7e\xa8\xf6\x24\x1e\x71\xa0\x8b\xec\xba\x0a\x74\xf1\x3c\xf5\x74\x57\xeb\xbf\xe7\x93\x2b\xca\xca\x9c\x99\xe3\x7c\x07\x00\x00\xff\xff\x1f\xd4\x86\x7c\xcc\x15\x00\x00")

func release_linux_conf_contracts_parammanager_cpp_abi_json() ([]byte, error) {
	return bindata_read(
		_release_linux_conf_contracts_parammanager_cpp_abi_json,
		"../../release/linux/conf/contracts/paramManager.cpp.abi.json",
	)
}

var _release_linux_conf_contracts_permissiondeniedevent_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\x52\x50\x50\x50\xa8\x06\x93\x20\xa0\x94\x97\x98\x9b\xaa\x64\xa5\xa0\x94\x9c\x9f\x57\x52\x94\x98\x5c\xa2\x50\x90\x5a\x94\x9b\x59\x5c\x9c\x99\x9f\xa7\xa4\x83\x50\x96\x99\x57\x50\x5a\x52\xac\x64\xa5\x10\x0d\x17\x43\x35\x08\xae\xb2\xa4\xb2\x00\x6c\x60\x71\x49\x51\x66\x5e\xba\x12\x8a\x82\x5a\x38\x2f\x16\xc9\x6c\x98\x8e\xd4\xb2\xd4\xbc\x12\x88\x86\x5a\xae\x58\x2e\x40\x00\x00\x00\xff\xff\xde\xc4\x5a\x41\xab\x00\x00\x00")

func release_linux_conf_contracts_permissiondeniedevent_json() ([]byte, error) {
	return bindata_read(
		_release_linux_conf_contracts_permissiondeniedevent_json,
		"../../release/linux/conf/contracts/permissionDeniedEvent.json",
	)
}

var _release_linux_conf_contracts_usermanager_cpp_abi_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9a\xcf\x6e\x9c\x30\x10\xc6\xef\x79\x0a\x8b\x33\xa7\xb6\xea\x21\xb7\x34\x91\xaa\x4a\xd5\x56\x6a\xd5\x53\x94\x83\xb5\x1e\x36\x48\xc4\x46\xf6\x50\x69\x55\xe5\xdd\x2b\x36\xbb\x2c\x7f\x6c\x16\x62\xd8\x35\xdb\xc9\x21\x07\x43\xcc\x37\x3f\x0f\x9f\xc9\x78\x1e\x6f\x18\x63\xec\xef\xee\x77\xf9\x13\x49\xfe\x02\xd1\x2d\x8b\x0c\xe0\xaf\x22\x07\x7d\x27\x5e\x52\x19\xc5\xc7\x1b\x52\x99\x17\x68\xa2\x5b\xf6\xf8\x54\x1b\x55\x05\xda\x86\xd7\x4a\x1a\xe4\x12\xcb\x19\x13\x9e\x19\xa8\xcf\x84\xdb\x7c\xf7\xa8\xa4\x90\x6b\x4c\x95\x8c\x76\x97\x5e\x63\x97\x24\xd4\x5c\x9a\x04\xf4\x51\xd7\x97\xed\x9d\x10\x1a\x8c\xb1\x0b\xac\xc6\x9a\x13\x76\x26\xe6\x42\xe8\xda\x0c\x1d\x81\x06\x75\x2a\x37\x51\x75\xa1\x71\xe7\x6b\x7d\xe0\xdc\x48\x36\x80\x25\x81\xef\xa9\xc1\x1f\xc9\x4f\x95\x81\x1f\x08\xe4\x7a\x03\xd8\x9a\xc7\x85\xa3\x49\xe1\x14\x82\xa1\x12\xa6\x79\x70\x1d\x32\xea\xc2\x97\x71\x49\xc4\x9c\x37\xd9\xae\x8d\xee\xfe\x25\xe9\xe5\xbb\x2a\x47\xbc\xe0\xca\xe6\x0c\xff\x0d\x5c\x17\x5b\x2e\xc4\xfd\x33\x4f\xe5\x05\xdc\x72\x29\x8c\x07\x7b\xf0\x50\xc8\xfe\x59\x4c\x84\x5b\x9a\x04\x64\x94\xc6\x53\x41\x1e\x4a\x99\xdc\x78\x0e\xa7\xf8\xaa\x55\x91\x13\xe1\x33\x11\x26\xa7\xf0\x81\xdc\xe7\x14\x44\x79\x22\xca\x03\x19\x93\x57\x4c\x0d\x98\x0b\xb1\x52\x02\x88\xef\x8c\x5e\x5c\x03\x4c\x26\xe1\xc3\xb8\xcf\x8a\x09\xf2\x34\x90\x87\x21\x26\xa3\x98\xc1\x88\xef\x95\x44\xcd\xd7\x48\x69\x3c\xa7\x57\x74\x41\x53\x32\x7b\x52\xee\xf1\x0c\x42\x3d\x19\xea\x31\x9c\xc9\x3b\x66\x42\x5d\x73\x8f\x07\xc8\x33\xb5\x05\x4d\xb4\xfd\x68\x8f\x42\x4d\x75\xe5\x79\x4a\x9e\x04\x7a\x3a\xd0\xa3\x38\x93\x77\x78\xa0\xee\xb1\x8e\xdf\x06\xb4\x1f\xd4\xc2\x80\xfe\x26\x13\x45\x60\x6b\x4c\x72\xc1\x11\x4a\xb6\x0f\x60\xd6\x2d\x3a\xef\x4c\xdc\x66\xf6\x0f\x8b\x34\x1e\xfa\x00\xd1\x95\xe9\xc1\xf2\x3a\x16\x71\x03\x78\x97\x65\xe5\x22\x3a\x6c\x27\xb8\x90\x27\xe8\x5e\x29\xc3\x3d\xe1\xb6\xee\xf0\x4e\xe4\xab\x33\xba\xd7\xeb\x25\xe9\xfe\x3e\x20\x8c\xa7\x31\x3e\x73\xe3\x6e\x54\x9b\x1e\x20\x1b\xe1\x99\x91\x56\x19\xac\x7a\xff\xcb\xbe\x9c\x63\xa6\x12\x3f\x7e\x38\xef\x62\xb5\x9b\x40\x5b\xd2\xba\x0b\xd8\x0a\xf4\xc0\xac\x78\xd3\xde\x5e\x86\x16\x52\x7b\x34\xfb\x7b\xe0\x0f\x48\x3c\xa1\xb6\xaf\x3f\x94\xb1\x78\x11\x7a\x77\xd9\x57\xde\x14\x87\xc7\xd7\xd1\x4c\xc6\xe2\x40\xf3\xc1\xd6\x97\xc5\xd8\x31\x8b\x03\xd4\x6b\x3b\x55\xaf\x24\x07\xae\xf7\x90\xba\x71\xc0\x7c\x2d\x47\x65\x4b\xd1\x5b\x39\x43\xd0\xef\x9b\xbd\x16\xfb\xa6\x39\x7c\xbd\x6f\x8c\x17\xc0\xb7\x5b\x44\x09\x70\x7f\x73\x57\x31\x59\x1c\x22\x5f\x47\x97\x69\xf5\xc6\x05\xae\xb7\xfe\xe9\x10\xaa\x5e\xfb\xfe\x16\x2e\x5f\xdb\xfe\x16\x32\xdf\x45\xed\x6f\x96\xbe\x0a\x16\x38\x5f\xe7\xfe\x16\xe2\xf7\xba\xe3\x0c\xba\x42\x1c\xb0\xde\x45\xec\x6f\xee\xc3\xa3\x30\xf3\xe1\x70\x34\xc0\x02\xfa\x48\x6f\x28\xd8\xeb\xb4\x55\xda\x2f\xad\xb3\x2d\x92\x45\x2b\x85\x69\xb2\x7d\xdf\x19\xc0\xa1\x0c\x53\x6a\xfd\xfc\x69\x6c\xb1\x6a\x7c\xfd\xee\xf0\x17\xf5\xc0\x6e\x9e\xfe\x05\x00\x00\xff\xff\x02\x83\x21\x9b\xfc\x3b\x00\x00")

func release_linux_conf_contracts_usermanager_cpp_abi_json() ([]byte, error) {
	return bindata_read(
		_release_linux_conf_contracts_usermanager_cpp_abi_json,
		"../../release/linux/conf/contracts/userManager.cpp.abi.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"../../release/linux/conf/contracts/cnsInitRegEvent.json": release_linux_conf_contracts_cnsinitregevent_json,
	"../../release/linux/conf/contracts/cnsInvokeEvent.json": release_linux_conf_contracts_cnsinvokeevent_json,
	"../../release/linux/conf/contracts/cnsManager.cpp.abi.json": release_linux_conf_contracts_cnsmanager_cpp_abi_json,
	"../../release/linux/conf/contracts/fireWall.abi.json": release_linux_conf_contracts_firewall_abi_json,
	"../../release/linux/conf/contracts/groupManager.cpp.abi.json": release_linux_conf_contracts_groupmanager_cpp_abi_json,
	"../../release/linux/conf/contracts/nodeManager.cpp.abi.json": release_linux_conf_contracts_nodemanager_cpp_abi_json,
	"../../release/linux/conf/contracts/paramManager.cpp.abi.json": release_linux_conf_contracts_parammanager_cpp_abi_json,
	"../../release/linux/conf/contracts/permissionDeniedEvent.json": release_linux_conf_contracts_permissiondeniedevent_json,
	"../../release/linux/conf/contracts/userManager.cpp.abi.json": release_linux_conf_contracts_usermanager_cpp_abi_json,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"..": &_bintree_t{nil, map[string]*_bintree_t{
		"..": &_bintree_t{nil, map[string]*_bintree_t{
			"release": &_bintree_t{nil, map[string]*_bintree_t{
				"linux": &_bintree_t{nil, map[string]*_bintree_t{
					"conf": &_bintree_t{nil, map[string]*_bintree_t{
						"contracts": &_bintree_t{nil, map[string]*_bintree_t{
							"cnsInitRegEvent.json": &_bintree_t{release_linux_conf_contracts_cnsinitregevent_json, map[string]*_bintree_t{
							}},
							"cnsInvokeEvent.json": &_bintree_t{release_linux_conf_contracts_cnsinvokeevent_json, map[string]*_bintree_t{
							}},
							"cnsManager.cpp.abi.json": &_bintree_t{release_linux_conf_contracts_cnsmanager_cpp_abi_json, map[string]*_bintree_t{
							}},
							"fireWall.abi.json": &_bintree_t{release_linux_conf_contracts_firewall_abi_json, map[string]*_bintree_t{
							}},
							"groupManager.cpp.abi.json": &_bintree_t{release_linux_conf_contracts_groupmanager_cpp_abi_json, map[string]*_bintree_t{
							}},
							"nodeManager.cpp.abi.json": &_bintree_t{release_linux_conf_contracts_nodemanager_cpp_abi_json, map[string]*_bintree_t{
							}},
							"paramManager.cpp.abi.json": &_bintree_t{release_linux_conf_contracts_parammanager_cpp_abi_json, map[string]*_bintree_t{
							}},
							"permissionDeniedEvent.json": &_bintree_t{release_linux_conf_contracts_permissiondeniedevent_json, map[string]*_bintree_t{
							}},
							"userManager.cpp.abi.json": &_bintree_t{release_linux_conf_contracts_usermanager_cpp_abi_json, map[string]*_bintree_t{
							}},
						}},
					}},
				}},
			}},
		}},
	}},
}}
